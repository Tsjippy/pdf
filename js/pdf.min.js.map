{"version":3,"file":"pdf.min.js","mappings":"mBAqBAA,QAAQC,IAAI,iBAEZC,SAASC,iBAAiB,4BAA4BC,QAASC,UAC3D,IAAIC,QAvBRD,eAAoCE,EAAQC,EAAa,GACrDC,SAASC,oBAAoBC,UAAY,kDACzC,IACI,MAAMC,QAAYH,SAASI,YAAYN,GAAQO,QAS/C,OAAgB,YAPGF,EAAIG,QAAQP,IAGXQ,KAAK,EAM7B,CAAE,MAAOC,GAEL,OADAjB,QAAQiB,MAAM,mCAAoCA,IAC3C,CACX,CACJ,CAKwBC,CAAqBC,EAAGC,KAAM,GAElDD,EAAGE,cAAc,OAAOC,MAAMhB,OAAS,GAAGA,MAE1Ca,EAAGE,cAAc,UAAUC,MAAMhB,OAAS,GAAGA,O","sources":["webpack://forms/./pdf.js"],"sourcesContent":["\r\nasync function getPdfPageDimensions(pdfUrl, pageNumber = 1) {\r\n    pdfjsLib.GlobalWorkerOptions.workerSrc = '//mozilla.github.io/pdf.js/build/pdf.worker.mjs';\r\n    try {\r\n        const pdf = await pdfjsLib.getDocument(pdfUrl).promise;\r\n\r\n        const page = await pdf.getPage(pageNumber);\r\n\r\n        //const width = page.view[2];\r\n        const height = page.view[3];\r\n\r\n        //console.log(`Page ${1} dimensions: Width = ${width} PDF units, Height = ${height} PDF units`);\r\n\r\n        return height * 1.44;\r\n\r\n    } catch (error) {\r\n        console.error(\"Error loading or processing PDF:\", error);\r\n        return false;\r\n    }\r\n}\r\n\r\nconsole.log('pdf.js loaded');\r\n\r\ndocument.querySelectorAll('.full-screen-pdf-wrapper').forEach( async el => {\r\n    let height  = await getPdfPageDimensions(el.data, 1);\r\n\r\n    el.querySelector('div').style.height = `${height}px`;\r\n\r\n    el.querySelector('object').style.height = `${height}px`;\r\n});\r\n"],"names":["console","log","document","querySelectorAll","forEach","async","height","pdfUrl","pageNumber","pdfjsLib","GlobalWorkerOptions","workerSrc","pdf","getDocument","promise","getPage","view","error","getPdfPageDimensions","el","data","querySelector","style"],"sourceRoot":""}